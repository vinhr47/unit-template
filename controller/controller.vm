#parse("/include/packages_variables.vm")
#parse("/include/init_var_entity.vm")
#parse("/include/java_header.vm")

#set( $urlEntityName = $fn.toLowerCase($entity.name))
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $referencedEntities = $entity.referencedEntityTypes() )
#set( $serviceName = "${entity.name}Service")
#set( $uncapitalizedServiceName = $fn.uncapitalize($serviceName) )
#set( $searchDtoName = "${entity.name}SearchDto")
#set( $enumSearchName = "${entity.name}SearchEnum")

package ${target.javaPackageFromFolder($SRC)};

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import vn.com.unit.constant.ConstantCore;
import vn.com.unit.constant.Message;
import vn.com.unit.constant.MessageList;
import vn.com.unit.jcanary.constant.CommonConstant;
import vn.com.unit.jcanary.common.PageWrapper;
import vn.com.unit.jcanary.constant.UrlConst;
import vn.com.unit.jcanary.constant.ViewConstant;
import vn.com.unit.jcanary.utils.SearchSessionUtils;
import org.springframework.web.bind.annotation.PostMapping;
import vn.com.unit.jcanary.controller.CommonImportExcelInterface;
import ${ROOT_PKG}.validator.${entity.name}Validator;
import ${ROOT_PKG}.service.${entity.name}ImportService;
import ${ROOT_PKG}.entity.${entity.name}Import;
import ${ROOT_PKG}.constant.DmsUrlConst;

//--- import Entities
import ${entityPackage}.${entity.name};
//--- import SearchDto
import ${dtoPackage}.${searchDtoName};
//--- import $searchDtoName
import ${servicePackage}.${serviceName};

/**
 * Spring MVC controller for '${entity.name}' management.
 */
@Controller
@RequestMapping("/${urlEntityName}")
public class ${entity.name}Controller implements CommonImportExcelInterface<${entity.name}Import> {
	/** define xml view list */
	private static final String VIEW_LIST = "${urlEntityName}.list";
    /** define xml view table */
    private static final String VIEW_TABLE = "${urlEntityName}.table";
    /** define xml view detail */
    private static final String VIEW_DETAIL  = "${urlEntityName}.detail";
	/** define xml view edit */
	private static final String VIEW_EDIT  = "${urlEntityName}.edit";
	/** define xml view edit */
	private static final String VIEW_IMPORT_LIST  = "${urlEntityName}.import.list";
	/** define xml view edit */
	private static final String VIEW_IMPORT_TABLE  = "${urlEntityName}.import.table";

    /**Define Role for this page - ROLE_AUTHED for default*/
    private static final String SCREEN_FUNCTION_CODE = "ROLE_AUTHED"; // RoleConstant.${entity.name}
	/**Define Template Excel for Download Template & Export Excel */
	private static final String TEMPLATE_EXPORT_EXCEL = "TemplateExport"; //ExcelConst.${entity.name};
	private static final String URL_ENTITY = "/${urlEntityName}";
	private static final String URL_LIST = ${urlEntityName} + UrlConst.LIST;
	@Autowired
    private ${serviceName} ${uncapitalizedServiceName};

	/** Service Validate data */
	@Autowired
	private ${entity.name}Validator ${uncapitalizedEntityName}Validator;

	/** MessageSource */
	@Autowired
	private MessageSource msg;

	@Autowired
	private ServletContext servletContext;

 	@Autowired
    private ${entity.name}ImportService ${uncapitalizedEntityName}ImportService;

	/**
     * showList
     *
     * @param searchDto
     * @param page
     * @param locale
     * @return
     * @author telosys
     */
    @GetMapping(UrlConst.LIST)
    public ModelAndView showList(@ModelAttribute(value = "searchDto") ${searchDtoName} searchDto
			, @RequestParam(value = "pageSize", required = false, defaultValue = "0") int pageSize
            , @RequestParam(value = "page", required = false, defaultValue = "1") int page, Locale locale, HttpServletRequest request)  {
        // Security for this page.
        if(securityForPage(SCREEN_FUNCTION_CODE)){
			return new ModelAndView(ViewConstant.ACCESS_DENIED_MODELANDVIEW);
		}
		
		  /* use for get link */
		SearchSessionUtils<${searchDtoName}> search = new SearchSessionUtils<${searchDtoName}>(searchDto, page, pageSize);
		searchDto = search.getSearchAttribute(request, URL_LIST, searchDto);
		
		page = search.getCurrentPageFromSession(request);
		pageSize = search.getSizeOfPageFromSession(request);
		
		/* END */
        ModelAndView mav = new ModelAndView(VIEW_LIST);
        PageWrapper<${entity.name}> pageWrapper = ${uncapitalizedServiceName}.doSearch(page, searchDto, pageSize);
		if (pageWrapper.getCountAll() == 0) {
			// Init message list
			MessageList messageList = new MessageList(Message.INFO);
			String msgInfo = msg.getMessage(ConstantCore.MSG_INFO_SEARCH_NO_DATA, null, null);
			messageList.add(msgInfo);
			mav.addObject(ConstantCore.MSG_LIST, messageList);
		}
        mav.addObject("pageWrapper", pageWrapper);
        mav.addObject("searchDto", searchDto);
        return mav;
    }

	/**
     * ajaxList
     *
     * @param searchDto
     * @param page
     * @param locale
     * @return
     * @author telosys
     */
    @PostMapping(UrlConst.AJAXLIST)
    public ModelAndView ajaxListEmail(@ModelAttribute(value = "searchDto") ${searchDtoName} searchDto
			, @RequestParam(value = "pageSize", required = false, defaultValue = "0") int pageSize
            , @RequestParam(value = "page", required = false, defaultValue = "1") int page, Locale locale)  {
        ModelAndView mav = new ModelAndView(VIEW_TABLE);
        // Security for this page.
        if(securityForPage(SCREEN_FUNCTION_CODE)){
			return new ModelAndView(ViewConstant.ACCESS_DENIED_MODELANDVIEW);
		}
        PageWrapper<${entity.name}> pageWrapper = ${uncapitalizedServiceName}.doSearch(page, searchDto, pageSize);
        if( pageWrapper.getCountAll() == 0 ) {
            // Init message list
            MessageList messageList = new MessageList(Message.INFO);
            String msgInfo = msg.getMessage(ConstantCore.MSG_INFO_SEARCH_NO_DATA, null, locale);
            messageList.add(msgInfo);
            mav.addObject(ConstantCore.MSG_LIST, messageList);
        } 
        /* use for get link */
		SearchSessionUtils<${searchDtoName}> search = new SearchSessionUtils<${searchDtoName}>(searchDto, page, pageSize);
		search.setSearchAttribute(request, URL_LIST, searchDto);
		/* END */
        mav.addObject("pageWrapper", pageWrapper);
        mav.addObject("searchDto", searchDto);
        return mav;
    }

	/**
     * getEdit
     *
     * @param searchDto
     * @param page
     * @param locale
     * @return
     * @author telosys
     */
	@GetMapping(UrlConst.EDIT)
    public ModelAndView getEdit(@RequestParam(value = "id", required = false) Long id, Locale locale) {
        ModelAndView mav = new ModelAndView(VIEW_EDIT);
        // Security for this page.
        if(securityForPage(SCREEN_FUNCTION_CODE)){
			return new ModelAndView(ViewConstant.ACCESS_DENIED_MODELANDVIEW);
		}
        ${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedServiceName}.get${entity.name}ById(id);
        
        // set url ajax
        String url = "${urlEntityName}".concat(UrlConst.EDIT);
        if (null != id) {
            url = url.concat("?id=").concat(id.toString());
        }
        ${uncapitalizedEntityName}.setUrl(url);
        
        mav.addObject("${uncapitalizedEntityName}", ${uncapitalizedEntityName});
        return mav;
    }

	/**
     * postEdit
     *
     * @param bindingResult
     * @param locale
     * @param redirectAttributes
     * @param request
     * @return ModelAndView
     * @author telosys
     */
    @PostMapping(UrlConst.EDIT)
    public ModelAndView postEdit(@Valid @ModelAttribute(value = "${uncapitalizedEntityName}") ${entity.name} ${uncapitalizedEntityName}, BindingResult bindingResult,
            Locale locale, RedirectAttributes redirectAttributes, HttpServletRequest request) {

		// Security for this page.
        if(securityForPage(SCREEN_FUNCTION_CODE)){
			return new ModelAndView(ViewConstant.ACCESS_DENIED_MODELANDVIEW);
		}
    	Long id = ${uncapitalizedEntityName}.getId();
        ModelAndView mav = new ModelAndView(VIEW_EDIT); 
        //Init message list
        MessageList messageList = new MessageList(Message.SUCCESS);
		//do validate data
        ${uncapitalizedEntityName}Validator.validate(${uncapitalizedEntityName}, bindingResult);
        
        //Validation
        if (bindingResult.hasErrors()) {
            // Add message error
            messageList.setStatus(Message.ERROR);
            String msgError = msg.getMessage(ConstantCore.MSG_ERROR_UPDATE, null, locale);
            messageList.add(msgError);
            mav.addObject(ConstantCore.MSG_LIST, messageList);
            mav.addObject("${uncapitalizedEntityName}", ${uncapitalizedEntityName});
            return mav;
        }      
        // Update Item
        ${uncapitalizedServiceName}.saveOrUpdate(${uncapitalizedEntityName});
        // Message Alert
        String msgInfo = "";        
        if (null != id){
            msgInfo = msg.getMessage(ConstantCore.MSG_SUCCESS_UPDATE, null, locale);
        }else{
            msgInfo = msg.getMessage(ConstantCore.MSG_SUCCESS_CREATE, null, locale);
        }
        messageList.add(msgInfo);
        redirectAttributes.addFlashAttribute(ConstantCore.MSG_LIST, messageList);
        // View Name
        String viewName = UrlConst.REDIRECT.concat(URL_ENTITY).concat(UrlConst.EDIT); 
        id = ${uncapitalizedEntityName}.getId();
        redirectAttributes.addAttribute("id", id);
        mav.setViewName(viewName);        
        
        return mav;
    }

	/**
     * postDelete
     * @param locale
     * @param redirectAttributes
     * @param request
     * @return ModelAndView
     * @author telosys
     */
    @PostMapping(UrlConst.DELETE)
    public ModelAndView postDelete(@RequestParam(value = "id", required = true) Long id,
 		Locale locale,RedirectAttributes redirectAttributes, HttpServletRequest request) {
        
		// Security for this page.
        if(securityForPage(SCREEN_FUNCTION_CODE)){
			return new ModelAndView(ViewConstant.ACCESS_DENIED_MODELANDVIEW);
		}
        ${uncapitalizedServiceName}.deleteItem(id);
       //Init message list
       MessageList messageList = new MessageList(Message.SUCCESS);
       String msgInfo = msg.getMessage(ConstantCore.MSG_SUCCESS_DELETE, null, locale);
       messageList.add(msgInfo);
       redirectAttributes.addFlashAttribute(ConstantCore.MSG_LIST, messageList);
               
        // Delete success redirect list page
        String viewName = UrlConst.REDIRECT.concat(URL_ENTITY).concat(UrlConst.LIST);
        ModelAndView mav = new ModelAndView(viewName);                                    
        return mav;
    }

	/**
     * getDetail
     *
     * @param id
     * @param locale
     * @return
     * @author telosys
     */
    @GetMapping(UrlConst.DETAIL)
    public ModelAndView getDetail(@RequestParam(value = "id", required = true) Long id, Locale locale) {

        ModelAndView mav = new ModelAndView(VIEW_DETAIL);        
        // Security for this page.
        if(securityForPage(SCREEN_FUNCTION_CODE)){
			return new ModelAndView(ViewConstant.ACCESS_DENIED_MODELANDVIEW);
		}
        ${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedServiceName}.get${entity.name}ById(id);
        
        // set url ajax
        String url = "${urlEntityName}".concat(UrlConst.DETAIL);
        if (null != id) {
            url = url.concat("?id=").concat(id.toString());
        }
        ${uncapitalizedEntityName}.setUrl(url);
        mav.addObject("${uncapitalizedEntityName}", ${uncapitalizedEntityName});
        return mav;
    }  

	/**
	 * 
	 * @param searchDto
	 * @param req
	 * @param res
	 * @param locale
	 * @author telosys
	 */
	@PostMapping(DmsUrlConst.EXPORT_EXCEL)
    public void exportListNonExport(@ModelAttribute(value = "searchDto") $searchDtoName searchDto, HttpServletRequest req,
            HttpServletResponse res, Locale locale) {
            ${uncapitalizedServiceName}.exportExcel(searchDto, res, locale);
    }

	/**
	* do search import display
	* @author telosys
	*/
    @Override
    public PageWrapper<${entity.name}Import> searchImport(int page, String importId, String sortRowNum, String sortMessage, Locale locale, String optionSort, int pageSize, ModelAndView mav) throws Exception {
        return ${uncapitalizedEntityName}ImportService.searchImport(page, importId, sortRowNum, sortMessage, ${entity.name}Import.class, locale, optionSort, pageSize);
    }
	
	/**
	* Template for Export data
	* @author telosys
	*/
    @Override
    public String getTemplateName(Locale locale) {
        return TEMPLATE_EXPORT_EXCEL + CommonConstant.TYPE_EXCEL;
    }
	
	/**
	* Validate data before import to table temp
	* @author telosys
	*/
    @Override
    public void validateListData(List<${entity.name}Import> lstT, Locale locale) throws Exception {
           ${uncapitalizedEntityName}ImportService.validate(lstT, locale);
    }
	
	/**
	* save data import to table temp
	* @author telosys
	*/
    @Override
    public void saveLstImport(List<${entity.name}Import> lstT) {
        ${uncapitalizedEntityName}ImportService.saveLstData(lstT);
    }

    @Override
    public boolean moveTempDataToMainTable(String importId, Locale locale){
    	try{
    		${uncapitalizedServiceName}.moveTempDataToMainTable(importId);
    		return true;
    	}catch(Exception e) {
    		return false;
    	}
    }
	
	/**
	* get url for go back list display after import data
	* @author telosys
	*/
	@Override
	public String getUrlController() {
		return "${urlEntityName}";
	}

	@Override
    public ServletContext getServletContext() {
        return servletContext;
    }

    @Override
    public MessageSource messageSource(){
    	return this.msg;
    }

    @Override
    public String getViewImportList() {
        return VIEW_IMPORT_LIST;
    }

    @Override
    public String getViewImportTable() {
        return VIEW_IMPORT_TABLE;
	}

}
